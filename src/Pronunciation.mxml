<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="100%" height="100%" minWidth="955" minHeight="600"
			   viewSourceURL="srcview/index.html"
			   applicationComplete="init()">
	<fx:Script>
		<![CDATA[
			import flash.events.ActivityEvent;
			import flash.media.Microphone;
			import flash.media.Sound;
			
			// graphics
			import spark.primitives.Rect;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			
			// wav sound
			import org.as3wavsound.WavSound;
			import org.as3wavsound.WavSoundChannel;
			import org.bytearray.micrecorder.*;
			import org.bytearray.micrecorder.encoder.WaveEncoder;
			import org.bytearray.micrecorder.events.RecordingEvent;
			
			// mfcc related classes written by sammy
			import mfcc.MFCC.MFCC;
			import mfcc.filterbank.Filterbank;
			import mfcc.filterbank.Filter;
			
			// variables
			private var _mic:Microphone = Microphone.getMicrophone();
			private var _waveEncoder:WaveEncoder = new WaveEncoder();
			private var _recorder:MicRecorder = new MicRecorder(_waveEncoder);
			private static const kMaxTime:Number = 5.0;
			private static const kRectCount:int = 8;
			private var _rects:Array = new Array();

			protected function init():void {	
				_recorder.addEventListener(RecordingEvent.RECORDING, recording);
				_recorder.addEventListener(Event.COMPLETE, recordComplete);
				stopBtn.enabled = false;
			}
			private function initRects():void {
				for (var i:int=0; i<kRectCount; i++) {
					var rect:Rect = new Rect();
					// position
					rect.x = hgroup.x + 30*i;
					// corner radius
					rect.bottomRightRadiusX = 3;
					rect.bottomRightRadiusY = 3;
					rect.bottomLeftRadiusX = 3;
					rect.bottomLeftRadiusY = 3;
					rect.topRightRadiusX = 3; 
					rect.topRightRadiusY = 3;
					rect.topLeftRadiusX = 3; 
					rect.topLeftRadiusY= 3;
					rect.height = 10;
					rect.width = 20;
					// color default is black
					rect.stroke = new SolidColorStroke();
					// save this rect
					_rects.push(rect);
					// add this rec to rectGroup
					rectGroup.addElement(rect);
				}
			}
			private function clearRects():void {
				for each (var rect:Rect in _rects) {
					rect.fill = new SolidColor(0x0000FF, 0.0);
				}
			}
			private function updateMeter(e:Event):void {
				// mic activity level is 0 - 100		
				var interval:Number = 100/kRectCount;
				var level:int = Math.floor(_mic.activityLevel/interval) as int;
				level = Math.max(level, 0);
				level = Math.min(level, kRectCount - 1);
				var rect:Rect = _rects[level];
				var alpha:Number = (_mic.activityLevel - interval * level)/interval;
				rect.fill = new SolidColor(0x0000FF, alpha);
				for (var i:int=0; i<level; i++) {
					rect = _rects[i];
					rect.fill = new SolidColor(0x0000FF, 1.0);
				}
				for (i=level+1; i<kRectCount; i++) {
					rect = _rects[i];
					rect.fill = new SolidColor(0x0000FF, 0.0);
				}
			}
			private function recording(e:RecordingEvent):void {
				// stop recording after maxtime
				var currentTime:int = Math.floor(e.time / 1000);			
				if(currentTime == kMaxTime) {
					if(_recorder != null) {
						trace("maxtime is reached");
						_recorder.stop();
						stopBtn.enabled = false;
					}
				}
			}
			private function recordComplete(e:Event):void {
				clearRects();
				this.removeEventListener(Event.ENTER_FRAME, updateMeter);
				// mfcc feature
				extractFeature();
				// playback
				var wavSound:WavSound =  new WavSound(_recorder.output);
				wavSound.play();
			}
			public function recordButtonClicked(clickEvent:Event):void {
				trace("record button clicked");
				if(_mic != null) {
					this.addEventListener(Event.ENTER_FRAME, updateMeter);
					_recorder.record();
					stopBtn.enabled = true;
				}
			}
			public function stopButtonClicked(clickEvent:Event):void {
				trace("stop button clicked");
				if(_recorder != null) {
					_recorder.stop();
					stopBtn.enabled = false;
				}
			}
			private function extractFeature():void {
				var mfcc:MFCC = new MFCC(_recorder.output);
			}
		]]>
	</fx:Script>
	<s:Label id="titleLabel"
			 horizontalCenter="0" y="{hgroup.y - 90}"
			 fontFamily="Verdana" fontWeight="bold"
			 fontSize="28"
			 text="Adobe"/>
	<s:HGroup id="rectGroup" x="{hgroup.x}" y="{hgroup.y - 35}"
			  initialize="initRects();">
	</s:HGroup>
	<s:HGroup id="hgroup" 
			  horizontalCenter="0" verticalCenter="0" 
			  width="200" gap="45">
		<s:Button id="recordBtn" 
				  label="Record" 
				  click="recordButtonClicked(event)"/>
		<s:Button id="stopBtn" 
				  label="Stop" 
				  click="stopButtonClicked(event)"/>
	</s:HGroup>
</s:Application>
